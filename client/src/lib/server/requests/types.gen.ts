// This file is auto-generated by @hey-api/openapi-ts

export type CreateMessageRequest = {
    encrypted_content: string;
    parent_id?: number | null;
    recipient_id: string;
    sender_id: string;
    signature?: string | null;
};

export type CreateMessageResponse = {
    message_id: number;
};

/**
 * A single field validation error
 */
export type FieldValidationErrorDoc = {
    /**
     * The validation code (e.g., "length", "email")
     */
    code: string;
    /**
     * Optional human-readable message
     */
    message?: string | null;
};

export type Message = {
    created_at: string;
    encrypted_content: string;
    id: number;
    is_read: boolean;
    parent_id?: number | null;
    recipient_id: string;
    sender_id: string;
    signature?: string | null;
};

export type PublicKey = string;

export type PublicKeyHash = string;

export type RegisterRequest = {
    public_key: string;
    username?: string | null;
};

export type RegisterResponse = {
    user_id: string;
    username: string;
};

export type RevokeTokenRequest = {
    /**
     * JWT token to revoke
     */
    jwt_token: string;
    /**
     * Optional reason for token revocation
     */
    reason?: string | null;
};

export type StoreTokenRequest = {
    /**
     * Optional device information associated with this token
     */
    device_info?: string | null;
    /**
     * JWT token to store
     */
    jwt_token: string;
};

export type UpdateUserRequest = {
    new_public_key?: string | null;
    new_username?: string | null;
};

export type User = {
    created_at: string;
    id: string;
    last_login?: string | null;
    public_key: PublicKey;
    public_key_hash: PublicKeyHash;
    updated_at: string;
    username: string;
};

export type ValidateTokenRequest = {
    /**
     * JWT token to validate
     */
    jwt_token: string;
};

export type ValidateTokenResponse = {
    /**
     * Indicates if the token is valid
     */
    valid: boolean;
};

/**
 * Error response returned when validation fails
 */
export type ValidationErrorResponseDoc = {
    /**
     * A map of field names to their validation errors
     */
    errors: {
        [key: string]: Array<FieldValidationErrorDoc>;
    };
};

export type GetUsersHandlerData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of users to return
         */
        limit?: number;
    };
    url: '';
};

export type GetUsersHandlerErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetUsersHandlerResponses = {
    /**
     * List of users
     */
    200: Array<User>;
};

export type GetUsersHandlerResponse = GetUsersHandlerResponses[keyof GetUsersHandlerResponses];

export type RegisterUserHandlerData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '';
};

export type RegisterUserHandlerErrors = {
    /**
     * Validation error
     */
    400: ValidationErrorResponseDoc;
    /**
     * Username or public key already exists
     */
    409: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type RegisterUserHandlerError = RegisterUserHandlerErrors[keyof RegisterUserHandlerErrors];

export type RegisterUserHandlerResponses = {
    /**
     * User registered successfully
     */
    201: RegisterResponse;
};

export type RegisterUserHandlerResponse = RegisterUserHandlerResponses[keyof RegisterUserHandlerResponses];

export type CreateMessageHandlerData = {
    body: CreateMessageRequest;
    path?: never;
    query?: never;
    url: '/api/messages';
};

export type CreateMessageHandlerErrors = {
    /**
     * Validation error
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CreateMessageHandlerResponses = {
    /**
     * Message created successfully
     */
    201: CreateMessageResponse;
};

export type CreateMessageHandlerResponse = CreateMessageHandlerResponses[keyof CreateMessageHandlerResponses];

export type GetConversationHandlerData = {
    body?: never;
    path: {
        /**
         * First user ID
         */
        user1_id: string;
        /**
         * Second user ID
         */
        user2_id: string;
    };
    query?: {
        /**
         * Maximum number of messages to return
         */
        limit?: number;
    };
    url: '/api/messages/conversations/{user1_id}/{user2_id}';
};

export type GetConversationHandlerErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetConversationHandlerResponses = {
    /**
     * Conversation messages
     */
    200: Array<Message>;
};

export type GetConversationHandlerResponse = GetConversationHandlerResponses[keyof GetConversationHandlerResponses];

export type GetThreadRepliesHandlerData = {
    body?: never;
    path: {
        /**
         * Parent message ID
         */
        parent_id: number;
    };
    query?: {
        /**
         * Maximum number of replies to return
         */
        limit?: number;
        /**
         * Number of replies to skip
         */
        offset?: number;
    };
    url: '/api/messages/threads/{parent_id}/replies';
};

export type GetThreadRepliesHandlerErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetThreadRepliesHandlerResponses = {
    /**
     * Thread replies
     */
    200: Array<Message>;
};

export type GetThreadRepliesHandlerResponse = GetThreadRepliesHandlerResponses[keyof GetThreadRepliesHandlerResponses];

export type GetCompleteThreadHandlerData = {
    body?: never;
    path: {
        /**
         * Thread root message ID
         */
        thread_root_id: number;
    };
    query?: {
        /**
         * Maximum number of messages to return
         */
        limit?: number;
    };
    url: '/api/messages/threads/{thread_root_id}';
};

export type GetCompleteThreadHandlerErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetCompleteThreadHandlerResponses = {
    /**
     * Complete thread
     */
    200: Array<Message>;
};

export type GetCompleteThreadHandlerResponse = GetCompleteThreadHandlerResponses[keyof GetCompleteThreadHandlerResponses];

export type GetUserThreadsHandlerData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: {
        /**
         * Maximum number of threads to return
         */
        limit?: number;
    };
    url: '/api/messages/users/{user_id}/threads';
};

export type GetUserThreadsHandlerErrors = {
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetUserThreadsHandlerResponses = {
    /**
     * User threads
     */
    200: Array<Message>;
};

export type GetUserThreadsHandlerResponse = GetUserThreadsHandlerResponses[keyof GetUserThreadsHandlerResponses];

export type GetMessageHandlerData = {
    body?: never;
    path: {
        /**
         * Message ID
         */
        message_id: number;
    };
    query?: never;
    url: '/api/messages/{message_id}';
};

export type GetMessageHandlerErrors = {
    /**
     * Message not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetMessageHandlerResponses = {
    /**
     * Message found
     */
    200: Message;
};

export type GetMessageHandlerResponse = GetMessageHandlerResponses[keyof GetMessageHandlerResponses];

export type RevokeTokenHandlerData = {
    body: RevokeTokenRequest;
    path?: never;
    query?: never;
    url: '/api/tokens/revoke';
};

export type RevokeTokenHandlerErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type RevokeTokenHandlerResponses = {
    /**
     * Token revoked successfully
     */
    200: unknown;
};

export type StoreTokenHandlerData = {
    body: StoreTokenRequest;
    path?: never;
    query?: never;
    url: '/api/tokens/store';
};

export type StoreTokenHandlerErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type StoreTokenHandlerResponses = {
    /**
     * Token stored successfully
     */
    201: unknown;
};

export type ValidateTokenHandlerData = {
    body: ValidateTokenRequest;
    path?: never;
    query?: never;
    url: '/api/tokens/validate';
};

export type ValidateTokenHandlerErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ValidateTokenHandlerResponses = {
    /**
     * Token validated
     */
    200: ValidateTokenResponse;
};

export type ValidateTokenHandlerResponse = ValidateTokenHandlerResponses[keyof ValidateTokenHandlerResponses];

export type GetUserHandlerData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/{user_id}';
};

export type GetUserHandlerErrors = {
    /**
     * User not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type GetUserHandlerResponses = {
    /**
     * User found
     */
    200: User;
};

export type GetUserHandlerResponse = GetUserHandlerResponses[keyof GetUserHandlerResponses];

export type UpdateUserHandlerData = {
    body: UpdateUserRequest;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/{user_id}';
};

export type UpdateUserHandlerErrors = {
    /**
     * Validation error
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
    /**
     * New username already exists
     */
    409: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UpdateUserHandlerResponses = {
    /**
     * User updated successfully
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'https://eerip.onrender.com' | (string & {});
};