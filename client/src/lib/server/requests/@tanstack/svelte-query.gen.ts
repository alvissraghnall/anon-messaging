// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getUsersHandler, registerUserHandler, createMessageHandler, getConversationHandler, getThreadRepliesHandler, getCompleteThreadHandler, getUserThreadsHandler, getMessageHandler, revokeTokenHandler, storeTokenHandler, validateTokenHandler, getUserHandler, updateUserHandler } from '../sdk.gen';
import { queryOptions, type MutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/svelte-query';
import type { GetUsersHandlerData, RegisterUserHandlerData, RegisterUserHandlerError, RegisterUserHandlerResponse, CreateMessageHandlerData, CreateMessageHandlerResponse, GetConversationHandlerData, GetThreadRepliesHandlerData, GetThreadRepliesHandlerResponse, GetCompleteThreadHandlerData, GetUserThreadsHandlerData, GetMessageHandlerData, RevokeTokenHandlerData, StoreTokenHandlerData, ValidateTokenHandlerData, ValidateTokenHandlerResponse, GetUserHandlerData, UpdateUserHandlerData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getUsersHandlerQueryKey = (options?: Options<GetUsersHandlerData>) => createQueryKey('getUsersHandler', options);

export const getUsersHandlerOptions = (options?: Options<GetUsersHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersHandlerQueryKey(options)
    });
};

export const registerUserHandlerQueryKey = (options: Options<RegisterUserHandlerData>) => createQueryKey('registerUserHandler', options);

export const registerUserHandlerOptions = (options: Options<RegisterUserHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerUserHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerUserHandlerQueryKey(options)
    });
};

export const registerUserHandlerMutation = (options?: Partial<Options<RegisterUserHandlerData>>): MutationOptions<RegisterUserHandlerResponse, RegisterUserHandlerError, Options<RegisterUserHandlerData>> => {
    const mutationOptions: MutationOptions<RegisterUserHandlerResponse, RegisterUserHandlerError, Options<RegisterUserHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerUserHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createMessageHandlerQueryKey = (options: Options<CreateMessageHandlerData>) => createQueryKey('createMessageHandler', options);

export const createMessageHandlerOptions = (options: Options<CreateMessageHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createMessageHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createMessageHandlerQueryKey(options)
    });
};

export const createMessageHandlerMutation = (options?: Partial<Options<CreateMessageHandlerData>>): MutationOptions<CreateMessageHandlerResponse, DefaultError, Options<CreateMessageHandlerData>> => {
    const mutationOptions: MutationOptions<CreateMessageHandlerResponse, DefaultError, Options<CreateMessageHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createMessageHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConversationHandlerQueryKey = (options: Options<GetConversationHandlerData>) => createQueryKey('getConversationHandler', options);

export const getConversationHandlerOptions = (options: Options<GetConversationHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConversationHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConversationHandlerQueryKey(options)
    });
};

export const getThreadRepliesHandlerQueryKey = (options: Options<GetThreadRepliesHandlerData>) => createQueryKey('getThreadRepliesHandler', options);

export const getThreadRepliesHandlerOptions = (options: Options<GetThreadRepliesHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getThreadRepliesHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getThreadRepliesHandlerQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getThreadRepliesHandlerInfiniteQueryKey = (options: Options<GetThreadRepliesHandlerData>): QueryKey<Options<GetThreadRepliesHandlerData>> => createQueryKey('getThreadRepliesHandler', options, true);

export const getThreadRepliesHandlerInfiniteOptions = (options: Options<GetThreadRepliesHandlerData>) => {
    return infiniteQueryOptions<GetThreadRepliesHandlerResponse, DefaultError, InfiniteData<GetThreadRepliesHandlerResponse>, QueryKey<Options<GetThreadRepliesHandlerData>>, number | Pick<QueryKey<Options<GetThreadRepliesHandlerData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetThreadRepliesHandlerData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getThreadRepliesHandler({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getThreadRepliesHandlerInfiniteQueryKey(options)
    });
};

export const getCompleteThreadHandlerQueryKey = (options: Options<GetCompleteThreadHandlerData>) => createQueryKey('getCompleteThreadHandler', options);

export const getCompleteThreadHandlerOptions = (options: Options<GetCompleteThreadHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCompleteThreadHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCompleteThreadHandlerQueryKey(options)
    });
};

export const getUserThreadsHandlerQueryKey = (options: Options<GetUserThreadsHandlerData>) => createQueryKey('getUserThreadsHandler', options);

export const getUserThreadsHandlerOptions = (options: Options<GetUserThreadsHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserThreadsHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserThreadsHandlerQueryKey(options)
    });
};

export const getMessageHandlerQueryKey = (options: Options<GetMessageHandlerData>) => createQueryKey('getMessageHandler', options);

export const getMessageHandlerOptions = (options: Options<GetMessageHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMessageHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMessageHandlerQueryKey(options)
    });
};

export const revokeTokenHandlerQueryKey = (options: Options<RevokeTokenHandlerData>) => createQueryKey('revokeTokenHandler', options);

export const revokeTokenHandlerOptions = (options: Options<RevokeTokenHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await revokeTokenHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: revokeTokenHandlerQueryKey(options)
    });
};

export const revokeTokenHandlerMutation = (options?: Partial<Options<RevokeTokenHandlerData>>): MutationOptions<unknown, DefaultError, Options<RevokeTokenHandlerData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RevokeTokenHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await revokeTokenHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const storeTokenHandlerQueryKey = (options: Options<StoreTokenHandlerData>) => createQueryKey('storeTokenHandler', options);

export const storeTokenHandlerOptions = (options: Options<StoreTokenHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await storeTokenHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: storeTokenHandlerQueryKey(options)
    });
};

export const storeTokenHandlerMutation = (options?: Partial<Options<StoreTokenHandlerData>>): MutationOptions<unknown, DefaultError, Options<StoreTokenHandlerData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<StoreTokenHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await storeTokenHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const validateTokenHandlerQueryKey = (options: Options<ValidateTokenHandlerData>) => createQueryKey('validateTokenHandler', options);

export const validateTokenHandlerOptions = (options: Options<ValidateTokenHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await validateTokenHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: validateTokenHandlerQueryKey(options)
    });
};

export const validateTokenHandlerMutation = (options?: Partial<Options<ValidateTokenHandlerData>>): MutationOptions<ValidateTokenHandlerResponse, DefaultError, Options<ValidateTokenHandlerData>> => {
    const mutationOptions: MutationOptions<ValidateTokenHandlerResponse, DefaultError, Options<ValidateTokenHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await validateTokenHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserHandlerQueryKey = (options: Options<GetUserHandlerData>) => createQueryKey('getUserHandler', options);

export const getUserHandlerOptions = (options: Options<GetUserHandlerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserHandler({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserHandlerQueryKey(options)
    });
};

export const updateUserHandlerMutation = (options?: Partial<Options<UpdateUserHandlerData>>): MutationOptions<unknown, DefaultError, Options<UpdateUserHandlerData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<UpdateUserHandlerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserHandler({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};