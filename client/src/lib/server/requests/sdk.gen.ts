// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
	GetUsersHandlerData,
	GetUsersHandlerResponse,
	RegisterUserHandlerData,
	RegisterUserHandlerResponse,
	RegisterUserHandlerError,
	CreateMessageHandlerData,
	CreateMessageHandlerResponse,
	GetConversationHandlerData,
	GetConversationHandlerResponse,
	GetThreadRepliesHandlerData,
	GetThreadRepliesHandlerResponse,
	GetCompleteThreadHandlerData,
	GetCompleteThreadHandlerResponse,
	GetUserThreadsHandlerData,
	GetUserThreadsHandlerResponse,
	GetMessageHandlerData,
	GetMessageHandlerResponse,
	RevokeTokenHandlerData,
	StoreTokenHandlerData,
	ValidateTokenHandlerData,
	ValidateTokenHandlerResponse,
	GetUserHandlerData,
	GetUserHandlerResponse,
	UpdateUserHandlerData
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

export const getUsersHandler = <ThrowOnError extends boolean = false>(
	options?: Options<GetUsersHandlerData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<GetUsersHandlerResponse, unknown, ThrowOnError>({
		url: '',
		...options
	});
};

export const registerUserHandler = <ThrowOnError extends boolean = false>(
	options: Options<RegisterUserHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		RegisterUserHandlerResponse,
		RegisterUserHandlerError,
		ThrowOnError
	>({
		url: '',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

export const createMessageHandler = <ThrowOnError extends boolean = false>(
	options: Options<CreateMessageHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CreateMessageHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/messages',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

export const getConversationHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetConversationHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetConversationHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/messages/conversations/{user1_id}/{user2_id}',
		...options
	});
};

export const getThreadRepliesHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetThreadRepliesHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetThreadRepliesHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/messages/threads/{parent_id}/replies',
		...options
	});
};

export const getCompleteThreadHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetCompleteThreadHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetCompleteThreadHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/messages/threads/{thread_root_id}',
		...options
	});
};

export const getUserThreadsHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetUserThreadsHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		GetUserThreadsHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/messages/users/{user_id}/threads',
		...options
	});
};

export const getMessageHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetMessageHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetMessageHandlerResponse, unknown, ThrowOnError>({
		url: '/api/messages/{message_id}',
		...options
	});
};

export const revokeTokenHandler = <ThrowOnError extends boolean = false>(
	options: Options<RevokeTokenHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
		url: '/api/tokens/revoke',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

export const storeTokenHandler = <ThrowOnError extends boolean = false>(
	options: Options<StoreTokenHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
		url: '/api/tokens/store',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

export const validateTokenHandler = <ThrowOnError extends boolean = false>(
	options: Options<ValidateTokenHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		ValidateTokenHandlerResponse,
		unknown,
		ThrowOnError
	>({
		url: '/api/tokens/validate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};

export const getUserHandler = <ThrowOnError extends boolean = false>(
	options: Options<GetUserHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<GetUserHandlerResponse, unknown, ThrowOnError>({
		url: '/{user_id}',
		...options
	});
};

export const updateUserHandler = <ThrowOnError extends boolean = false>(
	options: Options<UpdateUserHandlerData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
		url: '/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options?.headers
		}
	});
};
